
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем HTTPСоединение; // объект для отправки HTTP запросов.
Перем Логгер; // Объект для записи лога.
Перем ПараметрыСоединение Экспорт; // Добавил для просмотра параметров в режиме отладки.

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Отправляет данные на указанный адрес для обработки при помощи HTTP-запроса POST.
//
// Параметры:
//  HTTPЗапрос - HTTPЗапрос - HTTP-запрос.
// 
// Возвращаемое значение:
//  HTTPОтвет - HTTP-ответ.
//
Функция ОтправитьДляОбработки(Знач HTTPЗапрос) Экспорт
	Возврат ВызватьМетод("POST", HTTPЗапрос);
КонецФункции

// Получает данные с HTTP-сервера, используя GET-запрос.
//
// Параметры:
//  HTTPЗапрос - HTTPЗапрос - HTTP-запрос.
// 
// Возвращаемое значение:
//  HTTPОтвет - HTTP-ответ.
//
Функция Получить(Знач HTTPЗапрос) Экспорт
	Возврат ВызватьМетод("GET", HTTPЗапрос);
КонецФункции

// Отправляет данные на указанный адрес для обработки с использованием указанного HTTP-метода.
//
// Параметры:
//  HTTPМетод  - Строка - Строка, содержащая имя HTTP-метода для запроса.
//  HTTPЗапрос - HTTPЗапрос - HTTP-запрос.
// 
// Возвращаемое значение:
//  HTTPОтвет - HTTP-ответ.
//
Функция ВызватьHTTPМетод(Знач HTTPМетод, Знач HTTPЗапрос) Экспорт
	Возврат ВызватьМетод(HTTPМетод, HTTPЗапрос);
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура Инициализация(Знач л_Логгер, Знач л_ПараметрыСоединение) Экспорт
	
	Логгер = л_Логгер;
	ПараметрыСоединение = Новый ФиксированнаяСтруктура(л_ПараметрыСоединение);
	HTTPСоединение = Новый HTTPСоединение(ПараметрыСоединение.Сервер,
											ПараметрыСоединение.Порт,
											ПараметрыСоединение.Пользователь,
											ПараметрыСоединение.Пароль,
											ПараметрыСоединение.Прокси,
											ПараметрыСоединение.Таймаут,
											ПараметрыСоединение.ЗащищенноеСоединение,
											ПараметрыСоединение.ИспользоватьАутентификациюОС);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СериализацияЗапроса(Знач Метод, Знач HTTPЗапрос)
	
	Данные = Новый Структура();
	Данные.Вставить("Сервер", HTTPСоединение.Сервер);
	Данные.Вставить("Порт",  ПортДляЛогирования());
	Данные.Вставить("HTTPМетод", Метод);
	Данные.Вставить("АдресРесурса", HTTPЗапрос.АдресРесурса);
	Данные.Вставить("Тело", HTTPЗапрос.ПолучитьТелоКакСтроку());
	Данные.Вставить("Заголовки", ЗаголовкиВСтроку(HTTPЗапрос));
	
	Возврат Данные;
	
КонецФункции

Функция СериализацияОтвета(Знач HTTPОтвет)
	
	Если HTTPОтвет = Неопределено Тогда
		Данные = Неопределено;
	Иначе
		Данные = Новый Структура();
		Данные.Вставить("КодСостояния", HTTPОтвет.КодСостояния);
		Данные.Вставить("Тело", HTTPОтвет.ПолучитьТелоКакСтроку());
		Данные.Вставить("Заголовки", ЗаголовкиВСтроку(HTTPОтвет));
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция ПортДляЛогирования()
	
	Результат = 0;
	
	Если ЗначениеЗаполнено(HTTPСоединение.Порт) Тогда
		Результат = HTTPСоединение.Порт;
	ИначеЕсли HTTPСоединение.ЗащищенноеСоединение = Неопределено Тогда
		Результат = 80;
	Иначе
		Результат = 443;
	КонецЕсли;
	
	Возврат Формат(Результат, "ЧГ=");
	
КонецФункции

Функция ЗаголовкиВСтроку(Знач HTTPЗапрос)
	
	СтрокаЗаголовки = Новый Массив();
	Для Каждого КлючЗначение Из HTTPЗапрос.Заголовки Цикл
		СтрокаЗаголовки.Добавить(СтрШаблон("%1: %2", КлючЗначение.Ключ, КлючЗначение.Значение));
	КонецЦикла;
	
	Возврат СтрСоединить(СтрокаЗаголовки, Символы.ПС);
	
КонецФункции

Функция ВызватьМетод(Знач HTTPМетод, Знач HTTPЗапрос)
	
	УникальныйКодЗапроса = Строка(Новый УникальныйИдентификатор());
	СериализацияЗапроса = СериализацияЗапроса(HTTPМетод, HTTPЗапрос);
	Логгер.Отладка("Запрос", УникальныйКодЗапроса, СериализацияЗапроса);
	
	Попытка
		HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод(HTTPМетод, HTTPЗапрос);
	Исключение
		Логгер.Ошибка("Запрос", УникальныйКодЗапроса, СериализацияЗапроса);
		Логгер.Ошибка("ВызватьHTTPМетод", УникальныйКодЗапроса, Новый Структура("ПодробноеПредставлениеОшибки", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		ВызватьИсключение;
	КонецПопытки;
	
	Логгер.Отладка("Ответ", УникальныйКодЗапроса, СериализацияОтвета(HTTPОтвет));
	
	Возврат HTTPОтвет;
	
КонецФункции

#КонецОбласти

#КонецЕсли