
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем ИерархияСобытия; // первая часть события.
Перем ОбъектМетаданных; // метаданные для журнала регистрации.
Перем ИмяКлиента; // имя компьютера, на котором произошло событие.
Перем ПолноеИмяФайла; // путь к файлу с логом.
Перем ИмяУзла; // имя узла распределенной базы.
Перем ЗаписьВФайлВключена; // нужно писать сообщение в файл.
Перем СообщенияПользователюВключены; // нужно выводить сообщения пользователю.

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Записать ошибку.
//
// Параметры:
//  ИмяСобытия - Строка - имя события.
//  Сообщение  - Строка - произвольная строка комментария к событию.
//  Данные     - ЛюбаяСсылка, Число, Строка, Дата, Булево - данные, с которыми связано событие.
//
Процедура Ошибка(Знач ИмяСобытия, Знач Сообщение, Знач Данные = Неопределено) Экспорт
	ЗаписатьВЛог(ИмяСобытия, Сообщение, УровеньЖурналаРегистрации.Ошибка, Данные);
КонецПроцедуры

// Записать информацию.
//
// Параметры:
//  ИмяСобытия - Строка - имя события.
//  Сообщение  - Строка - произвольная строка комментария к событию.
//  Данные     - ЛюбаяСсылка, Число, Строка, Дата, Булево - данные, с которыми связано событие.
//
Процедура Информация(Знач ИмяСобытия, Знач Сообщение, Знач Данные = Неопределено) Экспорт
	ЗаписатьВЛог(ИмяСобытия, Сообщение, УровеньЖурналаРегистрации.Информация, Данные);
КонецПроцедуры

// Записать отладочную информацию.
//
// Параметры:
//  ИмяСобытия - Строка - имя события.
//  Сообщение  - Строка - произвольная строка комментария к событию.
//  Данные     - ЛюбаяСсылка, Число, Строка, Дата, Булево - данные, с которыми связано событие.
//
Процедура Отладка(Знач ИмяСобытия, Знач Сообщение, Знач Данные = Неопределено) Экспорт
	
	Если фмЛоггерПовтИсп.ОтладкаВключена(ИерархияСобытия) Тогда
		ЗаписатьВЛог(ИмяСобытия, Сообщение, УровеньЖурналаРегистрации.Предупреждение, Данные);
	КонецЕсли;
	
КонецПроцедуры

// Включить сообщения пользователю
//
Процедура ВключитьСообщенияПользователю() Экспорт
	СообщенияПользователюВключены = Истина;
КонецПроцедуры

// Отключить сообщения пользователю
//
Процедура ОтключитьСообщенияПользователю() Экспорт
	СообщенияПользователюВключены = Ложь;
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура Инициализация(Знач л_ИерархияСобытия, Знач л_ИмяКлиента = "") Экспорт
	
	Если ТипЗнч(л_ИерархияСобытия) = Тип("Строка") Тогда
		ИерархияСобытия = л_ИерархияСобытия;
		ОбъектМетаданных = Неопределено;
	Иначе
		ИерархияСобытия = л_ИерархияСобытия.Имя;
		ОбъектМетаданных = л_ИерархияСобытия;
	КонецЕсли;
	
	Если ПустаяСтрока(л_ИмяКлиента) Тогда
		ИмяКлиента = ИмяКомпьютера();
	Иначе
		ИмяКлиента = л_ИмяКлиента;
	КонецЕсли;
	
	Если ЗаписьВФайлВключена Тогда
		ПолноеИмяФайла = Обработки.фмЛоггер.ПолучитьИмяФайлаСЛогом();
		СоздатьКаталогФайла();
	КонецЕсли;
	
	ИмяУзла = фмЛоггерПереопределяемый.ИмяУзла();
	
КонецПроцедуры

Функция СложныйТипВJson(Знач Свойство, Знач Значение, Знач ДополнительныеПараметры, Отказ) Экспорт
	Возврат Строка(Значение);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьВЛог(Знач ИмяСобытия, Знач Сообщение, Знач Уровень, Знач Данные = Неопределено)
	
	ПредставлениеСообщения = ПредставлениеСообщения(Сообщение);
	ПолноеИмяСобытия = ИмяСобытияСИерархией(ИмяСобытия);
	ПредставлениеДанных = ДанныеВJson(Данные);
	
	Если СообщенияПользователюВключены Тогда
		ОбщегоНазначения.СообщитьПользователю(СообщениеПользователю(ИмяСобытия, ПредставлениеСообщения, ПредставлениеДанных));
	КонецЕсли;
	
	Если ЗаписьВФайлВключена Тогда
		ЗаписатьВФайл(ПолноеИмяСобытия, ПредставлениеСообщения, Уровень, ПредставлениеДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписьВФайлСОжиданием(Знач СтрокаJSON)
	
	Если ПустаяСтрока(ПолноеИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	Счетчик = 0;
	КоличествоПопыток = 50;
	
	Пока Счетчик <= КоличествоПопыток Цикл
		
		Попытка
			
			ЗаписьТекста = Новый ЗаписьТекста(ПолноеИмяФайла, КодировкаТекста.UTF8, Символы.ПС, Истина);
			ЗаписьТекста.ЗаписатьСтроку(СтрокаJSON);
			ЗаписьТекста.Закрыть();
			
			Прервать;
			
		Исключение
			
			Если Счетчик = КоличествоПопыток Тогда
				ВызватьИсключение;
			КонецЕсли;
			
		КонецПопытки;
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;

КонецПроцедуры

Функция ПредставлениеСообщения(Знач Сообщение)
	
	Если ТипЗнч(Сообщение) = Тип("ИнформацияОбОшибке") Тогда
		КраткоеПредставление = КраткоеПредставлениеОшибки(Сообщение);
		ПодробноеПредставление = ПодробноеПредставлениеОшибки(Сообщение);
	ИначеЕсли ТипЗнч(Сообщение) = Тип("Структура") Тогда
		КраткоеПредставление = Сообщение.КраткоеПредставление;
		ПодробноеПредставление = Сообщение.ПодробноеПредставление;
	Иначе
		КраткоеПредставление = Сообщение;
		ПодробноеПредставление = Сообщение;
	КонецЕсли;
	
	Структура = Новый Структура;
	Структура.Вставить("Краткое", КраткоеПредставление);
	Структура.Вставить("Подробное", ПодробноеПредставление);
	
	Возврат Структура;
	
КонецФункции

Функция ИмяСобытияСИерархией(Знач ИмяСобытия)
	Возврат ИерархияСобытия + "." + ИмяСобытия;
КонецФункции

Процедура СоздатьКаталогФайла()
	
	Если ПустаяСтрока(ПолноеИмяФайла) Тогда
		ОбщегоНазначения.СообщитьПользователю("Путь к логу не указан");
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ПолноеИмяФайла);
	СоздатьКаталог(Файл.Путь);
	
КонецПроцедуры

Функция СообщениеПользователю(Знач ИмяСобытия, Знач ПредставлениеСообщения, Знач ПредставлениеДанных)
	
	Возврат СтрШаблон("[%1] %2: %3 %4",
						ДатыСобытия(),
						ИмяСобытия,
						ПредставлениеСообщения.Краткое,
						ПредставлениеДанных);
	
КонецФункции

Процедура ЗаписатьВФайл(Знач ПолноеИмяСобытия, Знач ПредставлениеСообщения, Знач Уровень, Знач ПредставлениеДанных)
	
	Настройки = НастройкиСериализации();
	
	СообщениеДляЗаписи = Новый Структура;
	СообщениеДляЗаписи.Вставить("Date",   ДатыСобытия());
	СообщениеДляЗаписи.Вставить("Level",  Строка(Уровень));
	СообщениеДляЗаписи.Вставить("Event",  ПолноеИмяСобытия);
	СообщениеДляЗаписи.Вставить("Msg",    ПредставлениеСообщения.Подробное);
	СообщениеДляЗаписи.Вставить("Data",   ПредставлениеДанных);
	СообщениеДляЗаписи.Вставить("Client", ИмяКлиента);
	СообщениеДляЗаписи.Вставить("Node",   ИмяУзла);
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(Настройки.ПараметрыЗаписиJSON);
	ЗаписатьJSON(ЗаписьJSON, СообщениеДляЗаписи, Настройки.НастройкиСериализацииJSON);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	ЗаписьВФайлСОжиданием(СтрокаJSON);

КонецПроцедуры

Функция ДанныеВJson(Знач Данные)
	
	Результат = "";
	
	Если ЗначениеЗаполнено(Данные) Тогда
		Настройки = НастройкиСериализации();
		ЗаписьJSON = Новый ЗаписьJSON();
		ЗаписьJSON.УстановитьСтроку(Настройки.ПараметрыЗаписиJSON);
		ЗаписатьJSON(ЗаписьJSON, Данные, Настройки.НастройкиСериализацииJSON, "СложныйТипВJson", ЭтотОбъект);
		Результат = ЗаписьJSON.Закрыть();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НастройкиСериализации()
	
	НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON();
	НастройкиСериализацииJSON.СериализовыватьМассивыКакОбъекты = Ложь;
	НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением;
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
	
	Возврат Новый Структура("НастройкиСериализацииJSON, ПараметрыЗаписиJSON", НастройкиСериализацииJSON, ПараметрыЗаписиJSON);

КонецФункции

Функция ДатыСобытия()
	Возврат ТекущаяДатаСеанса();
КонецФункции

#КонецОбласти

#Область Инициализация

ЗаписьВФайлВключена = Истина;
СообщенияПользователюВключены = Ложь;

#КонецОбласти

#КонецЕсли
