
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем ИерархияСобытия; // первая часть события.
Перем ИмяКлиента; // имя компьютера, на котором произошло событие.
Перем ПолноеИмяФайла; // путь к файлу с логом.
Перем ИмяУзла; // имя узла распределенной базы.
Перем ЗаписьВФайлВключена; // нужно писать сообщение в файл.
Перем СообщенияПользователюВключены; // нужно выводить сообщения пользователю.
Перем ОтладкаВключена; // нужно выводить отладочные сообщения.
Перем ПараметрыЛоггера Экспорт; // Добавил для просмотра параметров в режиме отладки.
Перем Контекст; // Постоянная добавка в данные.

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Записать ошибку.
//
// Параметры:
//  ИмяСобытия - Строка - имя события.
//  Сообщение  - Строка - произвольная строка комментария к событию.
//  Данные     - ЛюбаяСсылка, Число, Строка, Дата, Булево - данные, с которыми связано событие.
//
Процедура Ошибка(Знач ИмяСобытия, Знач Сообщение, Знач Данные = Неопределено) Экспорт
	ЗаписатьВЛог(ИмяСобытия, Сообщение, УровеньЖурналаРегистрации.Ошибка, Данные);
КонецПроцедуры

// Записать информацию.
//
// Параметры:
//  ИмяСобытия - Строка - имя события.
//  Сообщение  - Строка - произвольная строка комментария к событию.
//  Данные     - ЛюбаяСсылка, Число, Строка, Дата, Булево - данные, с которыми связано событие.
//
Процедура Информация(Знач ИмяСобытия, Знач Сообщение, Знач Данные = Неопределено) Экспорт
	ЗаписатьВЛог(ИмяСобытия, Сообщение, УровеньЖурналаРегистрации.Информация, Данные);
КонецПроцедуры

// Записать отладочную информацию.
//
// Параметры:
//  ИмяСобытия - Строка - имя события.
//  Сообщение  - Строка - произвольная строка комментария к событию.
//  Данные     - ЛюбаяСсылка, Число, Строка, Дата, Булево - данные, с которыми связано событие.
//
Процедура Отладка(Знач ИмяСобытия, Знач Сообщение, Знач Данные = Неопределено) Экспорт
	
	Если ОтладкаВключена Тогда
		ЗаписатьВЛог(ИмяСобытия, Сообщение, УровеньЖурналаРегистрации.Предупреждение, Данные);
	КонецЕсли;
	
КонецПроцедуры

// Включить сообщения пользователю
//
Процедура ВключитьСообщенияПользователю() Экспорт
	СообщенияПользователюВключены = Истина;
	СохранитьПараметрыЛоггера();
КонецПроцедуры

// Отключить сообщения пользователю
//
Процедура ОтключитьСообщенияПользователю() Экспорт
	СообщенияПользователюВключены = Ложь;
	СохранитьПараметрыЛоггера();
КонецПроцедуры

// Включить запись в файл.
//
Процедура ВключитьЗаписьВФайл() Экспорт
	ЗаписьВФайлВключена = Истина;
	СохранитьПараметрыЛоггера();
КонецПроцедуры

// Отключить запись в файл.
//
Процедура ОтключитьЗаписьВФайл() Экспорт
	ЗаписьВФайлВключена = Ложь;
	СохранитьПараметрыЛоггера();
КонецПроцедуры

// Включить вывод отладочных сообщений
//
Процедура ВключитьОтладку() Экспорт
	ОтладкаВключена = Истина;
	СохранитьПараметрыЛоггера();
КонецПроцедуры

// Отключить вывод отладочных сообщений
//
Процедура ОтключитьОтладку() Экспорт
	ОтладкаВключена = Ложь;
	СохранитьПараметрыЛоггера();
КонецПроцедуры

// Добавить ключ в контекст для добавления в данные сообщений.
//
// Параметры:
//  Ключ	 - Строка - имя значения.
//  Значение - Произвольный - значение.
//
Процедура ДобавитьКонтекст(Знач Ключ, Знач Значение) Экспорт
	
	Контекст.Вставить("__" + Ключ, Значение);
	СохранитьПараметрыЛоггера();
	
КонецПроцедуры

// Очистить контекст.
//
Процедура ОчиститьКонтекст() Экспорт
	
	Контекст.Очистить();
	СохранитьПараметрыЛоггера();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура Инициализация(Знач л_ИерархияСобытия, Знач л_ИмяКлиента = "") Экспорт
	
	ИерархияСобытия = ИерархияСобытияВСтроку(л_ИерархияСобытия);
	
	Если ПустаяСтрока(л_ИмяКлиента) Тогда
		ИмяКлиента = ИмяКомпьютера();
	Иначе
		ИмяКлиента = л_ИмяКлиента;
	КонецЕсли;
	
	ПрочитатьНастройкиИзБазы();
	
	Если ЗаписьВФайлВключена Тогда
		ПолноеИмяФайла = Обработки.фмЛоггер.ПолучитьИмяФайлаСЛогом();
		Если ПустаяСтрока(ПолноеИмяФайла) Тогда
			ОбщегоНазначения.СообщитьПользователю("Путь к файлу с логом не указан");
			ОтключитьЗаписьВФайл();
		Иначе
			СоздатьКаталогФайла();
		КонецЕсли;
	КонецЕсли;
	
	ИмяУзла = фмЛоггерПереопределяемый.ИмяУзла();
	СохранитьПараметрыЛоггера();
	
КонецПроцедуры

Функция СложныйТипВJson(Знач Свойство, Знач Значение, Знач ДополнительныеПараметры, Отказ) Экспорт
	Возврат Строка(Значение);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьВЛог(Знач ИмяСобытия, Знач Сообщение, Знач Уровень, Знач Данные = Неопределено)
	
	ПредставлениеСообщения = ПредставлениеСообщения(Сообщение);
	ПолноеИмяСобытия = ИмяСобытияСИерархией(ИмяСобытия);
	ПредставлениеДанных = ДанныеВJson(Данные);
	
	Если СообщенияПользователюВключены Тогда
		ОбщегоНазначения.СообщитьПользователю(СообщениеПользователю(ИмяСобытия, ПредставлениеСообщения, ПредставлениеДанных));
	КонецЕсли;
	
	Если ЗаписьВФайлВключена Тогда
		ЗаписатьВФайл(ПолноеИмяСобытия, ПредставлениеСообщения, Уровень, ПредставлениеДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписьВФайлСОжиданием(Знач Строка)
	
	Счетчик = 0;
	КоличествоПопыток = 100;
	
	Пока Счетчик <= КоличествоПопыток Цикл
		
		Попытка
			
			ЗаписьТекста = Новый ЗаписьТекста(ПолноеИмяФайла, КодировкаТекста.UTF8, Символы.ПС, Истина);
			ЗаписьТекста.ЗаписатьСтроку(Строка);
			ЗаписьТекста.Закрыть();
			
			Прервать;
			
		Исключение
			
			Если Счетчик = КоличествоПопыток Тогда
				ВызватьИсключение;
			КонецЕсли;
			
		КонецПопытки;
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;

КонецПроцедуры

Функция ПредставлениеСообщения(Знач Сообщение)
	
	Если ТипЗнч(Сообщение) = Тип("ИнформацияОбОшибке") Тогда
		КраткоеПредставление = КраткоеПредставлениеОшибки(Сообщение);
		ПодробноеПредставление = ПодробноеПредставлениеОшибки(Сообщение);
	ИначеЕсли ТипЗнч(Сообщение) = Тип("Структура") Тогда
		КраткоеПредставление = Сообщение.КраткоеПредставление;
		ПодробноеПредставление = Сообщение.ПодробноеПредставление;
	Иначе
		КраткоеПредставление = Сообщение;
		ПодробноеПредставление = Сообщение;
	КонецЕсли;
	
	Структура = Новый Структура;
	Структура.Вставить("Краткое", КраткоеПредставление);
	Структура.Вставить("Подробное", ПодробноеПредставление);
	
	Возврат Структура;
	
КонецФункции

Функция ИмяСобытияСИерархией(Знач ИмяСобытия)
	Возврат ИерархияСобытия + "." + ИмяСобытия;
КонецФункции

Процедура СоздатьКаталогФайла()
	
	Файл = Новый Файл(ПолноеИмяФайла);
	СоздатьКаталог(Файл.Путь);
	
КонецПроцедуры

Функция СообщениеПользователю(Знач ИмяСобытия, Знач ПредставлениеСообщения, Знач ПредставлениеДанных)
	
	Возврат СтрШаблон("[%1] %2: %3 %4",
						ДатыСобытия(),
						ИмяСобытия,
						ПредставлениеСообщения.Краткое,
						ПредставлениеДанных);
	
КонецФункции

Процедура ЗаписатьВФайл(Знач ПолноеИмяСобытия, Знач ПредставлениеСообщения, Знач Уровень, Знач ПредставлениеДанных)
	
	СообщениеДляЗаписи = Новый Структура();
	СообщениеДляЗаписи.Вставить("Date",   ДатыСобытия());
	СообщениеДляЗаписи.Вставить("Level",  Строка(Уровень));
	СообщениеДляЗаписи.Вставить("Event",  ПолноеИмяСобытия);
	СообщениеДляЗаписи.Вставить("Msg",    ПредставлениеСообщения.Подробное);
	СообщениеДляЗаписи.Вставить("Data",   ПредставлениеДанных);
	СообщениеДляЗаписи.Вставить("Client", ИмяКлиента);
	СообщениеДляЗаписи.Вставить("Node",   ИмяУзла);
	
	ЗаписьВФайлСОжиданием(Сериализация(СообщениеДляЗаписи, СообщениеДляЗаписи.Event));
	
КонецПроцедуры

Функция ДанныеВJson(Знач Данные)
	
	Результат = "";
	Если Данные <> Неопределено Тогда
		Результат = Сериализация(Данные, "");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДатыСобытия()
	Возврат ТекущаяДатаСеанса();
КонецФункции

Процедура ПрочитатьНастройкиИзБазы()
	
	Если фмЛоггерПовтИсп.СообщенияПользователюВключены(ИерархияСобытия) Тогда
		ВключитьСообщенияПользователю();
	КонецЕсли;
	
	Если фмЛоггерПовтИсп.ОтладкаВключена(ИерархияСобытия) Тогда
		ВключитьОтладку();
	КонецЕсли;
	
КонецПроцедуры

Функция Сериализация(Знач Данные, Знач КраткоеПредставленияДанных)
	
	ОжидаемыеТипы = ОбщегоНазначенияКлиентСервер.МассивЗначений(Тип("Структура"), Тип("ФиксированнаяСтруктура"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("Сериализация", "Данные", Данные, ОжидаемыеТипы);
	
	КопияДанных = ОбщегоНазначения.СкопироватьРекурсивно(Данные, Ложь);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(КопияДанных, Контекст);
	
	Результат = "";
	Попытка
		Результат = JSON(КопияДанных);
	Исключение
		Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат = СтрШаблон("Ошибка сериализации ""%1"". Данные: %2", Ошибка, КраткоеПредставленияДанных);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция JSON(Знач Данные)
	
	НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON();
	НастройкиСериализацииJSON.СериализовыватьМассивыКакОбъекты = Ложь;
	НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	ЗаписатьJSON(ЗаписьJSON, Данные, НастройкиСериализацииJSON, "СложныйТипВJson", ЭтотОбъект);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

// Преобразовать в строку ИерархияСобытия
//
// Параметры:
//  ИерархияСобытия	 - Строка, ОбъектМетаданных - иерархия события лога.
// 
// Возвращаемое значение:
//  Строка - строковое представление.
//
Функция ИерархияСобытияВСтроку(Знач ИерархияСобытия)
	
	Если ТипЗнч(ИерархияСобытия) = Тип("Строка") Тогда
		Возврат ИерархияСобытия;
	Иначе
		Возврат ИерархияСобытия.Имя;
	КонецЕсли;
	
КонецФункции

Процедура СохранитьПараметрыЛоггера()
	
	Структура = Новый Структура();
	Структура.Вставить("ИерархияСобытия", ИерархияСобытия);
	Структура.Вставить("ИмяКлиента", ИмяКлиента);
	Структура.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
	Структура.Вставить("ИмяУзла", ИмяУзла);
	Структура.Вставить("ЗаписьВФайлВключена", ЗаписьВФайлВключена);
	Структура.Вставить("СообщенияПользователюВключены", СообщенияПользователюВключены);
	Структура.Вставить("ОтладкаВключена", ОтладкаВключена);
	Структура.Вставить("Контекст", Контекст);
	
	ПараметрыЛоггера = Новый ФиксированнаяСтруктура(Структура);
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ЗаписьВФайлВключена = Истина;
СообщенияПользователюВключены = Ложь;
ОтладкаВключена = Ложь;
Контекст = Новый Структура();

#КонецОбласти

#КонецЕсли
