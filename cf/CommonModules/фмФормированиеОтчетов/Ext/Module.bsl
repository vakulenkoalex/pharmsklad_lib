
#Область ПрограммныйИнтерфейс

// Сформировать отчет
//
// Параметры:
//  ОтчетОбъект			 - ОтчетОбъект, Структура				 - отчет, для которого формируется результат (нужны свойства СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных).
//  ДокументРезультат	 - ТаблицаЗначений, ТабличныйДокумент	 - объект, куда будет помещен результат отчета.
//  ДанныеРасшифровки	 - ДанныеРасшифровкиКомпоновкиДанных 	 - объект, куда будет помещена расшифровка отчета.
//  ВнешниеНаборыДанных	 - Структура							 - ключ: имя внешнего набора данных, значение: таблица значений.
//
Процедура СформироватьОтчет(ОтчетОбъект, ДокументРезультат, ДанныеРасшифровки = Неопределено, ВнешниеНаборыДанных = Неопределено) Экспорт
	
	Если ТипЗнч(ДокументРезультат) = Тип("ТаблицаЗначений") Тогда
		ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений");
	Иначе
		ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанных");
	КонецЕсли;
	
	Если ТипЗнч(ОтчетОбъект) = Тип("Структура") И ОтчетОбъект.Свойство("НастройкиКомпоновкиДанных") Тогда
		НастройкиКомпоновкиДанных = ОтчетОбъект.НастройкиКомпоновкиДанных;
	Иначе
		НастройкиКомпоновкиДанных = ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки();
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(ОтчетОбъект.СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, ДанныеРасшифровки, , ТипГенератора);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных();
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	
	Если ТипЗнч(ДокументРезультат) = Тип("ТаблицаЗначений") Тогда
		
		ПроцессорВыводаРезультата = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений(); 
		ПроцессорВыводаРезультата.УстановитьОбъект(ДокументРезультат);
	
	Иначе
		
		ПроцессорВыводаРезультата = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент(); 
		ПроцессорВыводаРезультата.УстановитьДокумент(ДокументРезультат);
		
	КонецЕсли;
	
	ПроцессорВыводаРезультата.Вывести(ПроцессорКомпоновки, Истина);
	
КонецПроцедуры

// Загрузить вариант отчета
//
// Параметры:
//  ОтчетОбъект	 - ОтчетОбъект - отчет, в который нужно загрузить настройку.
//  ИмяВарианта	 - Строка - имя варианта.
//
Процедура ЗагрузитьВариантОтчета(ОтчетОбъект, Знач ИмяВарианта) Экспорт
	
	ВариантОтчета = ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек.Найти(ИмяВарианта);
	Если ВариантОтчета = Неопределено Тогда
		ВызватьИсключение "Не найден вариант отчета с именем " + ИмяВарианта;
	КонецЕсли;
	
	ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(ВариантОтчета.Настройки);
	
КонецПроцедуры

// Получить результат варианта отчета как таблицу значений
//
// Параметры:
//  ОтчетОбъект	 - ОтчетОбъект	 - отчет, в который нужно загрузить настройку.
//  ИмяВарианта	 - Строка		 - имя варианта.
//  Отборы		 - Соответствие	 - ключ: имя поля, значение: значение отбора.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - результат отчета.
//
Функция РезультатОтчетаВТаблицу(ОтчетОбъект, Знач ИмяВарианта, Знач Отборы = Неопределено) Экспорт
	
	РезультатОтчета = Новый ТаблицаЗначений();
	
	ЗагрузитьВариантОтчета(ОтчетОбъект, ИмяВарианта);
	Если Отборы <> Неопределено Тогда
		фмФормированиеОтчетовКлиентСервер.ПрименитьОтборыКОтчету(Отборы, ОтчетОбъект);
	КонецЕсли;
	ОтчетОбъект.СкомпоноватьРезультат(РезультатОтчета);
	
	Возврат РезультатОтчета;
	
КонецФункции

#КонецОбласти