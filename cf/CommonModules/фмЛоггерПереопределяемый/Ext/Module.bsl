
#Область ПрограммныйИнтерфейс

// Получить имя узла для записи в тег Node.
// 
// Возвращаемое значение:
//  Строка - имя узла.
//
Функция ИмяУзла() Экспорт
	Возврат "";
КонецФункции

// Путь к папке с логом.
// 
// Возвращаемое значение:
//  Строка - путь.
//
Функция ПутьКФайлу() Экспорт
	Возврат фмПараметрыКлиентСерверПовтИсп.ПрочитатьЗначениеПараметра("ЛоггерПутьКФайлу", "");
КонецФункции

// Нужно писать отладочные сообщения.
//
// Параметры:
//  ИерархияСобытия - Строка, ОбъектМетаданных - иерархия события.
// 
// Возвращаемое значение:
//  Булево - если Истина, то отладка включена.
//
Функция ОтладкаВключена(Знач ИерархияСобытия) Экспорт
	Возврат ПараметрВключен("ЛоггерВключитьОтладку", ИерархияСобытия);
КонецФункции

// Нужно писать сообщения пользователю.
//
// Параметры:
//  ИерархияСобытия - Строка, ОбъектМетаданных - иерархия события.
// 
// Возвращаемое значение:
//  Булево - если Истина, то нужно писать сообщения пользователю.
//
Функция СообщенияПользователюВключены(Знач ИерархияСобытия) Экспорт
	Возврат ПараметрВключен("ЛоггерВключитьСообщенияПользователю", ИерархияСобытия);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПараметрВключен(Знач ИмяПараметра, Знач ИерархияСобытия) Экспорт
	
	ЗначениеПараметра = фмПараметрыКлиентСерверПовтИсп.ПрочитатьЗначениеПараметра(ИмяПараметра, "");
	Если ПустаяСтрока(ЗначениеПараметра) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВключенныеИерархииСобытий = СтрРазделить(ЗначениеПараметра, ",", Ложь);
	Возврат ВключенныеИерархииСобытий.Найти(ИерархияСобытия) <> Неопределено;
	
КонецФункции

#КонецОбласти