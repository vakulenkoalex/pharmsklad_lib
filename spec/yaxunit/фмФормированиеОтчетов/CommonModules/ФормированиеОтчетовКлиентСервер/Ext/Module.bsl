
#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	ЮТТесты
		.УдалениеТестовыхДанных()
		.ДобавитьТест("ОтборПоПолюНаРавно", "Установить отбор по полю на равно")
		.ДобавитьТест("ОтборПоПолюНаСписок", "Установить отбор по полю на список")
		.ДобавитьТест("ОшибкаПриОтбореПоПолюКоторогоНет", "Установить отбор по полю которого нет")
		.ДобавитьТест("УстановкаПараметра", "Установить значение параметра")
		.ДобавитьТест("ПрименитьОтборыКОтчетуРавно", "ПрименитьОтборыКОтчету отбор на равно")
		.ДобавитьТест("ПрименитьОтборыКОтчетуСписок", "ПрименитьОтборыКОтчету отбор на список");
	
КонецПроцедуры

#КонецОбласти

#Область Тесты

Процедура ОтборПоПолюНаРавно() Экспорт
	
	ИмяПоля = "Поле1";
	ЗначениеОтбора = "1";
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор();
	КомпоновщикНастроек = фмф_ВызовСервера.СоздатьКомпоновщикНастроекОтчета(УникальныйИдентификатор);
	
	фмФормированиеОтчетовКлиентСервер.УстановитьЗначениеОтбора(КомпоновщикНастроек, ИмяПоля, ЗначениеОтбора);
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	ЮТест
		.ОжидаетЧто(Настройки.Отбор.Элементы, "отборы настройки")
		.ИмеетДлину(1);
		
	ПроверкаОтбора = ЮТест.Предикат()
						.Реквизит("ЛевоеЗначение").Равно(Новый ПолеКомпоновкиДанных(ИмяПоля))
						.Реквизит("ПравоеЗначение").Равно(ЗначениеОтбора)
						.Реквизит("ВидСравнения").Равно(ВидСравненияКомпоновкиДанных.Равно)
						.Реквизит("Использование").Равно(Истина);
	ЮТест
		.ОжидаетЧто(Настройки.Отбор.Элементы[0], "отбор")
		.СоответствуетПредикату(ПроверкаОтбора);
	
КонецПроцедуры

Процедура ОтборПоПолюНаСписок() Экспорт
	
	ИмяПоля = "Поле1";
	ЗначениеОтбора = ОбщегоНазначенияКлиентСервер.МассивЗначений("1", "2");
	ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор();
	КомпоновщикНастроек = фмф_ВызовСервера.СоздатьКомпоновщикНастроекОтчета(УникальныйИдентификатор);
	
	фмФормированиеОтчетовКлиентСервер.УстановитьЗначениеОтбора(КомпоновщикНастроек, ИмяПоля, ЗначениеОтбора, ВидСравненияОтбора);
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	ЮТест
		.ОжидаетЧто(Настройки.Отбор.Элементы, "отборы настройки")
		.ИмеетДлину(1);
		
	ПроверкаОтбора = ЮТест.Предикат()
						.Реквизит("ЛевоеЗначение").Равно(Новый ПолеКомпоновкиДанных(ИмяПоля))
						.Реквизит("ПравоеЗначение").Равно(ЗначениеОтбора)
						.Реквизит("ВидСравнения").Равно(ВидСравненияОтбора)
						.Реквизит("Использование").Равно(Истина);
	ЮТест
		.ОжидаетЧто(Настройки.Отбор.Элементы[0], "отбор")
		.СоответствуетПредикату(ПроверкаОтбора);
	
КонецПроцедуры

Процедура ОшибкаПриОтбореПоПолюКоторогоНет() Экспорт
	
	ИмяПоля = "Поле15";
	ЗначениеОтбора = "1";
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор();
	КомпоновщикНастроек = фмф_ВызовСервера.СоздатьКомпоновщикНастроекОтчета(УникальныйИдентификатор);
	
	ЮТест
		.ОжидаетЧто(фмФормированиеОтчетовКлиентСервер, "установить отбор")
		.Метод("УстановитьЗначениеОтбора", ОбщегоНазначенияКлиентСервер.МассивЗначений(ЗначениеОтбора, ИмяПоля, КомпоновщикНастроек))
		.ВыбрасываетИсключение("недоступно для отбора");
		
КонецПроцедуры

Процедура УстановкаПараметра() Экспорт
	
	ИмяПоля = "Параметр";
	ЗначениеОтбора = "1";
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор();
	КомпоновщикНастроек = фмф_ВызовСервера.СоздатьКомпоновщикНастроекОтчета(УникальныйИдентификатор);
	
	фмФормированиеОтчетовКлиентСервер.УстановитьЗначениеОтбора(КомпоновщикНастроек, ИмяПоля, ЗначениеОтбора);
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	ЮТест
		.ОжидаетЧто(Настройки.Отбор.Элементы, "отборы настройки")
		.ИмеетДлину(0);
	ЮТест
		.ОжидаетЧто(Настройки.ПараметрыДанных.Элементы, "параметры настройки")
		.ИмеетДлину(1);
		
	ПроверкаПараметра = ЮТест.Предикат()
						.Реквизит("Параметр").Равно(Новый ПараметрКомпоновкиДанных(ИмяПоля))
						.Реквизит("Значение").Равно(ЗначениеОтбора)
						.Реквизит("Использование").Равно(Истина);
	ЮТест
		.ОжидаетЧто(Настройки.ПараметрыДанных.Элементы[0], "параметр")
		.СоответствуетПредикату(ПроверкаПараметра);
	
КонецПроцедуры

Процедура ПрименитьОтборыКОтчетуРавно() Экспорт
	
	ИмяПоля = "Поле1";
	ЗначениеОтбора = "1";
	Отборы = фмКонструкторыКлиентСервер.СоздатьСоответствие(ИмяПоля, ЗначениеОтбора);
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор();
	КомпоновщикНастроек = фмф_ВызовСервера.СоздатьКомпоновщикНастроекОтчета(УникальныйИдентификатор);
	
	фмФормированиеОтчетовКлиентСервер.ПрименитьОтборыКОтчету(Отборы, Новый Структура("КомпоновщикНастроек", КомпоновщикНастроек));
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	ЮТест
		.ОжидаетЧто(Настройки.Отбор.Элементы, "отборы настройки")
		.ИмеетДлину(1);
		
	ПроверкаОтбора = ЮТест.Предикат()
						.Реквизит("ЛевоеЗначение").Равно(Новый ПолеКомпоновкиДанных(ИмяПоля))
						.Реквизит("ПравоеЗначение").Равно(ЗначениеОтбора)
						.Реквизит("ВидСравнения").Равно(ВидСравненияКомпоновкиДанных.Равно)
						.Реквизит("Использование").Равно(Истина);
	ЮТест
		.ОжидаетЧто(Настройки.Отбор.Элементы[0], "отбор")
		.СоответствуетПредикату(ПроверкаОтбора);
	
КонецПроцедуры

Процедура ПрименитьОтборыКОтчетуСписок() Экспорт
	
	ИмяПоля = "Поле1";
	ЗначениеОтбора = ОбщегоНазначенияКлиентСервер.МассивЗначений("1", "2");
	Отборы = фмКонструкторыКлиентСервер.СоздатьСоответствие(ИмяПоля, ЗначениеОтбора);
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор();
	КомпоновщикНастроек = фмф_ВызовСервера.СоздатьКомпоновщикНастроекОтчета(УникальныйИдентификатор);
	
	фмФормированиеОтчетовКлиентСервер.ПрименитьОтборыКОтчету(Отборы, Новый Структура("КомпоновщикНастроек", КомпоновщикНастроек));
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	ЮТест
		.ОжидаетЧто(Настройки.Отбор.Элементы, "отборы настройки")
		.ИмеетДлину(1);
		
	ПроверкаОтбора = ЮТест.Предикат()
						.Реквизит("ЛевоеЗначение").Равно(Новый ПолеКомпоновкиДанных(ИмяПоля))
						.Реквизит("ПравоеЗначение").Равно(ЗначениеОтбора)
						.Реквизит("ВидСравнения").Равно(ВидСравненияКомпоновкиДанных.ВСписке)
						.Реквизит("Использование").Равно(Истина);
	ЮТест
		.ОжидаетЧто(Настройки.Отбор.Элементы[0], "отбор")
		.СоответствуетПредикату(ПроверкаОтбора);
	
КонецПроцедуры

#КонецОбласти

#Область События

Процедура ПередВсемиТестами() Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти